#!/bin/bash

sudo pacman -S --noconfirm archlinux-keyring endeavouros-keyring

function bluetooth_manager() {
    sudo pacman -S --noconfirm bluez bluez-utils blueman
    sudo systemctl enable bluetooth
    sudo systemctl start bluetooth
}

function base_install() {
    sudo pacman -S rofi dmenu sxhkd \
        redshift vim kitty \
        ttf-firacode-nerd ttf-fira-code zsh powerline-fonts git base-devel
}

function generate_ssh_key() {
    # Generate an RSA key pair with no passphrase
    ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -q -N ""

    # Display the public key to the user
    echo "Public Key:"
    cat ~/.ssh/id_rsa.pub

    # Remind the user to add the public key to GitHub
    echo "Be sure to add this public key to your GitHub account before using it for authentication."
}

function clone_dotfiles_repo() {
    # Clone the dotfiles repository into the target folder, forcibly overwriting any existing files
    git clone --force https://github.com/starlighter4097/dotfiles.git ~ 2>/dev/null

    # Check if the clone was successful
    if [ $? -eq 0 ]; then
        echo "The dotfiles repository has been cloned into ~."
    else
        echo "There was an error cloning the dotfiles repository."
    fi
}

function extra_packages_install() {
    # Array of AUR packages
    aur_packages=(
        google-chrome
        vscodium-bin
        volctl
        simplescreenrecorder
        media-downloader
        zoom
    )

    # Array of Pacman packages
    pacman_packages=(
        kdenlive
        vlc
        alacritty
        python3
        python3-pip
        kitty
        thunar
        kdeconnect
    )

    # Prompt user whether to install each package
    selected_packages=()
    for package in "${aur_packages[@]}" "${pacman_packages[@]}"
    do
        read -p "Do you want to install $package? (y/n): " choice
        case "$choice" in
            y|Y ) selected_packages+=("$package");;
            n|N ) echo "Skipping $package...";;
            * ) echo "Invalid choice, skipping $package...";;
        esac
    done

    # Install selected packages
    if [ ${#selected_packages[@]} -gt 0 ]; then
        echo "Installing the following packages:"
        printf '%s\n' "${selected_packages[@]}"
        yay -S --needed "${selected_packages[@]}"
    fi
}

function docker_install() {
    curl -sSL https://get.docker.com/ | sh
}

function zsh_install() {
    chsh -s /usr/bin/zsh

    mkdir -p .config/zsh
    touch .config/zsh/zsh_{func,alias,themes}
    read -p "Press y to reinstall old alias, any other key to skip: " y
    if [[ $y == "y" ]]; then
        curl -fsSL https://raw.githubusercontent.com/starlighter4097/dotfiles/master/.config/zsh/zsh_alias >>~/.config/zsh/zsh_alias
    fi

    curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
    echo 'POWERLEVEL10K_DISABLE_CONFIGURATION_WIZARD=true' >>! ~/.zshrc
    echo 'source ~/.oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme' > ~/.config/zsh/zsh_themes
    curl -fsSL https://raw.githubusercontent.com/starlighter4097/dotfiles/master/.zshrc >>~/.zshrc
}

function aur_helper_install() {
    cd ~
    sudo pacman -S --needed git base-devel
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si
}

function set_cron() {
    sudo pacman -S --noconfirm fcron

    sudo systemctl start fcron
    sudo systemctl enable fcron

    crontab cron.txt # this will load the cron.txt to crontab

    # setup cronjob for syncing notepad git, dotfiles git etc
}

function redshifter_install() {
    mkdir -p ~/bin
    cd ~/bin
    curl -o redshifter https://raw.githubusercontent.com/wizetek/bash/master/redshifter
    chmod +x redshifter
    cd
}

function dwm_install() {
    git clone https://github.com/starlighter4097/dwm.git -b dwm-endeavour3 dwm
    cd dwm
    sudo make clean install
    sudo cp dwm.desktop /usr/share/xsessions/
    cd slstatus
    sudo make clean install
    cd
}

function git_config() {
    git config --global user.name "starlighter4097"
    git config --global user.email "starlighter4097@gmail.com"
}

function choice_runner() {
    echo -e "Enter your choice:\n1) base_install\n2) aur_helper_install\n3) redshifter_install\n4) zsh_install\n5) dwm_install\n6) extra_packages_install\n7) git_config\n8) docker_install\n9) bluetooth_manager\n10) generate_ssh_key\n11) clone_dotfiles_repo\n12) set_cron"
    echo -e "\nPress q to quit"
    read CHOICE
    if [[ $CHOICE == 'q' ]]; then
        echo "Exiting..."
        exit 1
    fi

    case "$CHOICE" in
        1)
            echo "Installing base packages..."
            base_install
            echo "Done!"
            ;;
        2)
            echo "Installing yay..."
            aur_helper_install
            echo "Done!"
            ;;
        3)
            echo "Installing redshifter..."
            redshifter_install
            echo "Done!"
            ;;
        4)
            echo "Installing zsh..."
            zsh_install
            echo "Done!"
            ;;
        5)
            echo "Installing dwm..."
            dwm_install
            echo "Done!"
            ;;
        6)
            echo "Installing extra packages..."
            extra_packages_install
            echo "Done!"
            ;;
        7)
            echo "Configuring git..."
            git_config
            echo "Done!"
            ;;
        8)
            echo "Installing Docker..."
            docker_install
            echo "Done!"
            ;;
        9)
            echo "Setting up Bluetooth..."
            bluetooth_manager
            echo "Done!"
            ;;
        10)
            echo "Generating SSH key..."
            generate_ssh_key
            echo "Done!"
            ;;
        11)
            echo "Cloning dotfiles repository..."
            clone_dotfiles_repo
            echo "Done!"
            ;;
        12)
            echo "Setting up cron job..."
            set_cron
            echo "Done!"
            ;;
       *)
        echo "Wrong choice, exiting ..."
        echo -e "\ndone ...................\n"
        exit 1
        ;;

    esac
}

while true; do
    choice_runner
done